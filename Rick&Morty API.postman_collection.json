{
	"info": {
		"_postman_id": "063b08ee-d3bc-407b-bce2-de180a95b054",
		"name": "Rick&Morty API",
		"description": "[https://rickandmortyapi.com/](https://rickandmortyapi.com/)\n\nEtape 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Characters",
			"item": [
				{
					"name": "Get All Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/character",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"character"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Endpoint false",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Pour une route inexistante, l’API renvoie une 404",
									"pm.test(\"Route is not found\", () => {",
									"   pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/charact",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"charact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single character",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/character/360",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"character",
								"360"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/character/3,360",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"character",
								"3,360"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Dead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/character/?status=dead",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"character",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "dead"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "On teste l'API [https://rickandmortyapi.com/api](https://rickandmortyapi.com/api)\n\nEtape 1\n\nEtant donné les requêtes sur l'API\n\nQuand l'utilisateur envoie la méthode Get Characters\n\nAlors le serveur renvoit un message 200"
		},
		{
			"name": "Get Locations",
			"item": [
				{
					"name": "Get All locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single location",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/location/98",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"location",
								"98"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Microverse type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Le status de la réponse est un succès",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// La réponse est bien un objet",
									"pm.test(\"Response is object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/location/?type=Microverse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"location",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Microverse"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "On teste l'API https://rickandmortyapi.com/api\n\nEtape 1\n\nEtant donné les requêtes sur l'API\n\nQuand l'utilisateur envoie la méthode Get Locations\n\nAlors le serveur renvoit un message 200"
		},
		{
			"name": "Get Episodes",
			"item": [
				{
					"name": "Get All episodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episode"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Not an episode",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Pour un épisode inexistant, l’API renvoie une 404",
									"pm.test(\"Route is not found\", () => {",
									"   pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episode/56",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episode",
								"56"
							]
						}
					},
					"response": []
				}
			],
			"description": "On teste l'API https://rickandmortyapi.com/api\n\nEtape 1\n\nEtant donné les requêtes sur l'API\n\nQuand l'utilisateur envoie la méthode Get Episodes\n\nAlors le serveur renvoit un message 200"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://rickandmortyapi.com/api"
		}
	]
}